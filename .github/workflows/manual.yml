name: Robot Framework CI

on:
  # Run on every push and pull-request to the default branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    # Uses the GitHub-hosted Ubuntu runner (20.04 ‚Üí has systemd/dbus for browsers)
    runs-on: ubuntu-latest

    # Matrix example (uncomment if you want to test on multiple Python versions)
    # strategy:
    #   matrix:
    #     python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: ‚¨áÔ∏è  Checkout repository
        uses: actions/checkout@v4

      # Set up Python
      - name: üêç  Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"          # replace with matrix.python-version if using matrix

      # Install Chrome (headless) + chromedriver
      - name: üñ•Ô∏è  Install Chrome & chromedriver
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable chromium-chromedriver
          wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/136.0.7103.113/linux64/chromedriver-linux64.zip
          unzip chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver
          # Expose chromedriver on PATH
          sudo ln -sf /usr/lib/chromium-browser/chromedriver /usr/local/bin/chromedriver

      # Install project requirements
      - name: üì¶  Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install robotframework==6.* \
                     robotframework-seleniumlibrary \
                     robotframework-browser \
                     robotframework-faker
          # If you have a requirements.txt, do instead:
          # pip install -r requirements.txt

      # Run Robot Framework tests
      - name: ü§ñ  Execute Robot tests
        run: |
          # Create an artifacts directory (Robot writes logs in cwd by default)
          mkdir -p robot_results
          robot --outputdir robot_results tests/

      # Upload Robot logs/reports to the Actions ‚ÄúArtifacts‚Äù tab
      - name: üì§  Publish Robot results
        if: always()                   # Upload even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: robot-results
          path: robot_results          # Entire output directory

      # (Optional) Surface Robot‚Äôs junit-style XML to GitHub UI for test summary
      - name: üí°  Publish JUnit summary (optional)
        if: always()
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "robot_results/output.xml"

